lpine Expression Error: Unexpected token ';'

Expression: "{
  page: 'forms-list',
  forms: [],
  searchQuery: '',
  statuses: ['DRAFT', 'PROD', 'OLD VERSION'],
  importJson: '',
  filteredForms() {
    return this.forms.filter(form => 
      form.name.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
      form.id.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
      form.status?.toLowerCase().includes(this.searchQuery.toLowerCase()) ||
      form.user_email.toLowerCase().includes(this.searchQuery.toLowerCase())
    );
  },
  async init() {
    const userEmail = localStorage.getItem('user_email');
    try {
      const response = await fetch(`/api/sultan/forms?email=${userEmail}&status=${this.form?.status || 'Draft'}`);
      this.forms = await response.json();
    } catch (error) {
      console.error('Failed to load forms:', error);
      this.forms = [];
    }
  },
  async saveForm(form) {
    const userEmail = localStorage.getItem('user_email');
    try {
      await fetch('/api/sultan/forms/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          email: userEmail, 
          form: form,
          status: form.status 
        })
      });
    } catch (error) {
      console.error('Failed to save form:', error);
      alert('Failed to save form');
    }
  },
  async duplicateForm(form) {
      const userEmail = localStorage.getItem('user_email');
      const duplicate = {
        ...form,
        id: `forms-${Date.now()}`,
        name: `${form.name} (Copy)`,
        user_email: userEmail
      };
      try {
        await this.saveForm(duplicate);
        this.forms.push(duplicate);
      } catch (error) {
        console.error('Failed to duplicate form:', error);
        alert('Failed to duplicate form');
      }
    },
    async deleteForm(formId) {
      if (!confirm('Are you sure you want to delete this form? This action cannot be undone.')) return;
      const userEmail = localStorage.getItem('user_email');
      try {
        const response = await fetch(`/api/sultan/forms/delete/${formId}?email=${userEmail}`, {
          method: 'DELETE'
        });
        if (response.ok) {
          this.forms = this.forms.filter(form => form.id !== formId);
        } else {
          alert('Failed to delete form');
        }
      } catch (error) {
        console.error('Failed to delete form:', error);
        alert('Failed to delete form');
      }
    },
    async importForm() {
      if (!this.importJson.trim()) {
        alert('Please paste form JSON');
        return;
      }
      
      try {
        const formData = JSON.parse(this.importJson);
        const userEmail = localStorage.getItem('user_email');
        formData.user_email = userEmail;
        formData.id = `forms-${Date.now()}`;
        
        await this.saveForm(formData);
        this.forms.push(formData);
        this.importJson = '';
        this.page = 'forms-list';
      } catch (error) {
        console.error('Failed to import form:', error);
        alert('Invalid JSON format');
      }
    }
  }
}"
